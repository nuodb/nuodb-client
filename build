#!/usr/bin/env python
# (C) Copyright NuoDB, Inc. 2019  All Rights Reserved.

"""
Command-line tool for building the NuoDB client package.
"""

import os
import sys
import argparse

from string import Template
from datetime import datetime

from client.exceptions import ClientError
from client.package import Package
from client.utils import Globals, info
from client.utils import run, mkdir, rmdir, rmfile, rmrf
from client.utils import copyinto, copyfiles, loadfile, savefile

# Import all packages
from client.pkg import *

# Also disable any per-user site-packages for safety
os.environ['PYTHONNOUSERSITE'] = 'true'

os.environ['LC_ALL'] = 'C'
os.environ['LANG'] = 'C'

# Turn off file extension saving for tar (in MacOS)
os.environ['COPYFILE_DISABLE'] = 'true'

USER = 'nuodb'
GROUP = 'nuodb'

def build_clients(packages):
    version = datetime.now().strftime("%Y%m%d")
    target = Globals.target
    pkgname = 'nuodb-client-{}.{}'.format(version, target)

    # This is handled inside Package so it can deal with prerequisites etc.
    Package.build_all(packages)

    # Now construct the final package from all the individual dist directories
    pkgdir = os.path.join(Globals.finalroot, pkgname)
    rmdir(pkgdir)
    mkdir(pkgdir)
    staged = []
    for pkgnm in packages:
        pkg = Package.get_package(pkgnm)
        info("Installing package {} ...".format(pkg.name))
        for stg in pkg.staged:
            staged.append(stg)
            copyinto(stg.stagedir, pkgdir)

    manifest = []
    packages = []
    for stg in sorted(staged, key=lambda x: x.title):
        manifest.append('  * {} version {}'.format(stg.title, stg.version))
        packages.append("""{}
{}

Version: {}
Requirements: {}

Contents:
  {}""".format(stg.title,
               '-'*len(stg.title),
               stg.version,
               stg.requirements,
               '\n  '.join(sorted(stg.getcontents()))))

    # Construct the various values for the README file
    replace = {'VERSION': version,
               'LICENSE': Package.getlicense('3BSD'),
               'MANIFEST': '\n'.join(manifest),
               'PACKAGES': '\n\n'.join(packages)}

    readme = loadfile('README.in')
    savefile(os.path.join(pkgdir, 'README.txt'),
             Template(readme).substitute(replace))

    etc = os.path.join(pkgdir, 'etc')
    mkdir(etc)
    if Globals.target == 'lin64':
        copyfiles(['nuodb_setup.sh'], Globals.etcdir, etc)
    else:
        copyfiles(['nuodb_setup.bat'], Globals.etcdir, etc)

    return pkgname

def create_package(pkgname):
    if Globals.target == 'lin64':
        out = '{}.tar.gz'.format(pkgname)
        rmfile(out)
        info("Creating {} ...".format(out))
        run(['tar', '-c', '-z', '-f', out, '--owner=%s' % USER, '--group=%s' % GROUP, pkgname], cwd=Globals.finalroot)
    else:
        out = '{}.zip'.format(pkgname)
        rmfile(out)
        info("Creating {} ...".format(out))
        run(['zip', '-r', out, pkgname], cwd=Globals.finalroot)

def main():
    Globals.init(clientroot=os.path.dirname(os.path.realpath(__file__)))

    # Get a list of possible packages
    packages = Package.get_packages()

    parser = argparse.ArgumentParser(description='Build the NuoDB Client package')

    parser.add_argument(
        "-i",
        "--info",
        action="store_true",
        help="Show information about known client packages")

    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Show verbose output")

    parser.add_argument(
        "-p",
        "--platform",
        default='lin64',
        choices=['lin64', 'win64'],
        help="Client platform")

    parser.add_argument(
        "--no-package",
        action="store_true",
        help="Don't create the final tarball/zip file.")

    parser.add_argument(
        "--clean",
        action="store_true",
        help="Clean previous builds.  Downloads are not cleaned.")

    parser.add_argument(
        "--real-clean",
        action="store_true",
        help="Clean previous builds and downloads.")

    parser.add_argument(
        'packages',
        metavar='PKGS',
        default='all',
        nargs='*',
        choices=['all']+packages,
        help='Packages to be built')

    options = parser.parse_args()

    Globals.setup(isverbose=options.verbose, target=options.platform)

    try:
        if options.clean or options.real_clean:
            if options.packages == 'all':
                info("Cleaning packages ...")
                rmrf([Globals.tmproot, Globals.finalroot])
                if options.real_clean:
                    info("Cleaning downloads ...")
                    rmdir(Globals.downloadroot)
            else:
                for name in options.packages:
                    pkg = Package.get_package(name)
                    info('{}: Cleaning'.format(name))
                    pkg.clean(real=options.real_clean)
            return

        if options.packages == 'all':
            options.packages = packages

        pkgname = build_clients(options.packages)

        if not options.no_package:
            create_package(pkgname)

    except ClientError as ex:
        sys.exit("Failed: {}".format(str(ex)))

main()
